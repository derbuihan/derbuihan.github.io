<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>読書 on derbuihan blog</title>
    <link>https://derbuihan.github.io/tags/%E8%AA%AD%E6%9B%B8/</link>
    <description>Recent content in 読書 on derbuihan blog</description>
    <image>
      <title>derbuihan blog</title>
      <url>https://derbuihan.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://derbuihan.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 06 Nov 2023 02:05:18 +0900</lastBuildDate>
    <atom:link href="https://derbuihan.github.io/tags/%E8%AA%AD%E6%9B%B8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>「ブルシット・ジョブ」を読んだ</title>
      <link>https://derbuihan.github.io/posts/bullshit_jobs/</link>
      <pubDate>Mon, 06 Nov 2023 02:05:18 +0900</pubDate>
      <guid>https://derbuihan.github.io/posts/bullshit_jobs/</guid>
      <description>はじめに デヴィッド・グレーバー「ブルシット・ジョブ――クソどうでもいい仕事の理論」を読んだ。
デヴィッド・グレーバーの前作「官僚制のユートピア」を読んで1面白かったので、次作の「ブルシット・ジョブ」を手に取った。 結構有名な本らしい。
序 ブルシット・ジョブ現象について メモ この本は「社会は無益な仕事であふれかえっている」という著者の直感を確かめることから始まる。 「ブルシット・ジョブ現象について」という記事を雑誌に書いて、著者はその直感を世に示した。 この記事を書いたことで、様々な分野から自身の仕事がブルシットであるというメッセージが寄せられた。 これによって、著者は無益である仕事が社会に溢れかえっていることを確信し、その思考を発展させてこの本にまとめた。
感想 本の書き出しとしてすごく面白い。 人間の思考とは直感から始まるので、こういう書き出しは楽しく読める。 論文もこういう感じで書いてくれたらいいのに。
1 ブルシット・ジョブとはなにか？ メモ この章では、「ブルシット・ジョブ」について定義づけを行っている。 軍隊の部屋の引っ越しや美容師やマフィアの殺し屋などいくつかの仕事を例に挙げて、それらの仕事がブルシットかどうかを判断し、ブルシット・ジョブの定義を行っている。
「ブルシット・ジョブとは、被雇用者本人でさえ、その存在を正当化しがたいほど、完璧に無意味で、不必要で、有害でもある有償の雇用の形態である。とはいえ、その雇用条件の一環として、本人は、そうではないと取り繕わなければならないように感じている。」
感想 それぞれの働き手の主観によって定義づけするのが良くないみたいな議論があった。社会学だとそういうもんなのかな。
2 どんな種類のブルシット・ジョブがあるのか？ メモ この章ではブルシット・ジョブの分類を行っている。 ブルシット・ジョブを「取り巻き」、「脅し屋」、「尻ぬぐい」、「書類穴埋め人」、「タスクマスター」に分類している。
「取り巻き」：誰かを偉そうに見せたり、偉そうな気分を味合わせるという、ただそれだけのために存在している仕事。 例としてブローカーの代理で電話をかけるためだけに雇われている人を紹介している。 この人は「〇〇さんの代理としてお電話差し上げました。」っていうことで〇〇さんを偉そうに見せるのが仕事らしい。
「脅し屋」：その仕事が脅迫的な要素を持っている人間たち。 例として、化粧品の CM に出ている女優の映像を加工をする仕事を上げている。 映像の加工という仕事は、昔は映画の宇宙船をリアルに見せて、それを観客に見せて感動させるのが仕事だった。 ただ現在は女優の顔のシミを飛ばして肌を真っ白にして、それを CM として流してテレビの前の人の肌に欠陥があるように思わせるのが仕事である。 これも脅し屋に分類される。 他にもコールセンターで営業電話をする仕事に一部も脅し屋に分類している。
「尻ぬぐい」：組織に欠陥が存在しているためにその仕事が存在してるにすぎない雇われ人である。 例として、大学で部屋の工事を頼んだのに大工は来なくて大工が来ないことを謝る人がきたという著者の経験を述べている。 この謝だけの人を尻ぬぐいと呼んでいる。 謝る人を雇わずに大工を雇えばいいのではないかと書かれている。
「書類穴埋め人」：組織が実際にやっていないことをやっていると主張できるようにすることが主要ないし唯一の存在理由であるような仕事である。 例として海外の企業が不正な取引を実施していないかを調査する信用調査会社を上げている。 この信用調査会社は実際にはネットで 1 時間や 2 時間調べた内容を、専門用語をたくさん使って報告書を書くことで成り立っている。 実際にはほとんど企業の調査などしていないが、調査していると主張できるようにするから書類穴埋め人に分類される。
「タスクマスター」：タスクマスターは二つに分類される。 第一類型は、他人への仕事の割り当てだけからなる仕事である。これは取り巻きの亜種として分類しても良い。 第二類型は、ブルシットジョブをしている人を監視して、新たなブルシットジョブを作り出す仕事である。 例は長いので省略。
二次的ブルシットジョブとは、ブルシットジョブで成り立っている会社のビルの清掃や電気工事を請け負う雇用形態のことである。 この仕事そのものは清掃員や電気工事士であるためブルシットジョブには分類されていないが、そもそもブルシットジョブで成り立っている会社が存在しなければ、清掃員や電気工事士は雇われないため、二次的ブルシットジョブと呼ばれる。
感想 ブルシット・ジョブの分類をみた。 生活してると身の回りのかなりの割合がブルシットジョブに分類されている気がしてくる。 CM は半分ぐらい脅し屋だし、やってる感を出すための書類穴埋め人や、何もしてないタスクマスターも見られる。 むしろ現代社会ではブルシットジョブでない仕事をすることのほうが難しいのではないか。
3 なぜ、ブルシット・ジョブをしている人間は、きまって自分が不幸だと述べるのか？ メモ この章ではがツライ理由について述べる。
大学時代のアルバイト経験で、仕事を効率的に終わらせすぎて、時間が余ってしまった経験を述べる。 仕事が終わったため休んでいたら、雇用主に見つかってひどく怒られたと述べる。</description>
    </item>
    <item>
      <title>「Ｃプログラミング診断室」を読んだ</title>
      <link>https://derbuihan.github.io/posts/c_programming_diagnosis_room/</link>
      <pubDate>Thu, 02 Nov 2023 19:32:18 +0900</pubDate>
      <guid>https://derbuihan.github.io/posts/c_programming_diagnosis_room/</guid>
      <description>はじめに 藤原 博文 「Cプログラミング診断室」を読んだ。
最近 C コンパイラを自作していて、ソフトウェア開発の歴史に興味が湧いている。 その中で昔のソフトウェア開発の現場を少しでも感じたくてこの本を読んだ。
この本は 1991 年から 1993 年にかけてソフトウェアデザインに掲載された記事をまとめたものである。 1989 年に C 言語の最初の標準化（ANSI 標準）が行われたので、それから 2~4 年経った時期に書かれた文章である。
1980 年代は BASIC が主流で、1990 年代になって UNIX の発展に伴って C 言語が流行り始めた理解している。 そのため 1990 年代前半は BASIC 時代の GOTO 文を多用してグローバル変数に状態を撒き散らすおじさんが、 C 言語を書き始めたという時期なのかなと思っている。 そういう時代背景から、こういった企画が立ち上がったのだろう。（ほとんど想像です。）
内容全体はこちらから無料で読むことができる。私は図書館で借りて読んだ。
メモ この本の面白さは、ソフトウェア開発において気をつけるべきことが書いてあることではなく著者の愚痴が書いてあることにあるが、それはさておき、この本を読んで今後意識したいことを忘れないように纏めておく。
変数名は省略しない 変数名を一文字にしない。 英語でもローマ字でもかまわないから、フルスペルに近いものにする。
関数は短く 関数は 60 行以内に。100 行を超えたら必ず分割。 理由は長い関数はパソコンの画面に収まらないから。
設計とは この本は徹底的にフローチャートによる設計を批判している。
goto 文と同様に諸悪の根源とされているフローチャートを業務に使っている職場 が存在していたとは恐ろしいことです。
フローチャートは、「ソフトウェア考古学」の対象であり、情報処理技術者 試験の中にだけ今だに残っているものです。
私の感覚ではフローチャートって実質的 GOTO 文だし、現代の安全なプログラミング言語とは全く合わないと思う。
設計技法、開発技法の本はいっぱい出版されています。フローチャート以外の方法について、概略で十分ですから、何か適当な本を読んでおくことは重要です。
設計とは、目的の処理をどうやって実現するか、どう関数に分解するかなどの「意図」や「全体 の流れ」を書きあげるものです。
設計の表現方法は複数ある。設計は所詮人間同士のコミュニケーション手段なのだから、伝わらない設計を作るより伝わる設計を作るべきだと思う。
データ構造を書く データ構造はしっかり書くべきだと言っている。
プログラムは、データを処理するためにあり、データの違いによって制御の流れ が変更されます。あくまでも、データが主体です。変数、引数などのデータをどう定義するかで、 プログラムの組易さは大幅に改良されます。データ構造がどうなっているかの図の方が、フローチャー トよりはるかに役立ちます。データの意味だけはしっかり書きましょう。</description>
    </item>
    <item>
      <title>「官僚制のユートピア」を読んだ</title>
      <link>https://derbuihan.github.io/posts/the_utopia_of_rules/</link>
      <pubDate>Wed, 04 Oct 2023 00:19:16 +0900</pubDate>
      <guid>https://derbuihan.github.io/posts/the_utopia_of_rules/</guid>
      <description>はじめに デヴィッド・グレーバー「僚制のユートピア　テクノロジー、構造的愚かさ、リベラリズムの鉄則」を読んだ。
これまでこのブログでは IT 技術関連の記事を書いてきたが、最近はZennで書くようになったので、これからはZennに書くのには適さない記事を書いていこうと思う。
はじめにこの本を読むに至った経緯から説明する。私は数学とか物理とかプログラムが好きな人間で、理路整然と並んだ定理や原理を大切にし、プログラムで自動化された仕組みを作るのが好きな人間である。（もちろん申請書類を書くのは大嫌いだが。。。） 最近は、ChatGPT をはじめとする生成系 AI を試していて、この技術がどういった方向に向かっていくのか気にしている。 生成系 AI が社会どのように変えていくのか、ヒントが得られる気がしてこの本を手に取った。
各章を読んでメモと感想を書いて、最後に全体の感想を書く。
序　リベラリズムの鉄則 メモ アメリカの政治の歴史とアメリカの政府と金融と企業が一体となっている。 そもそも金融とは国が戦争のために作ったもので、金融そのものが規制の塊みたいなものなのだから、市場の自由な競争に任せれば規制が全てなくなるというのは幻想で、市場とはそもそも官僚的なシステムそのものである。 そのため、そもそも市場に任せれば効率化されるのではなく、逆に規制が増えて規制が正しく働いているか監視するための役所の仕事と人が増えて全体として非効率になる。 この構造は社会のありとあらゆる場所で観測できるので、それをリベラリズムの鉄則と呼んでいる。
リベラルな人が規制緩和を掲げて選挙に出るが、それはその人が得する形に規制を変更するだけで、それによって手続きが減ることはなく、逆に手続きが増える結果になっている。 例えば大学の研究においては、競争的資金獲得のために研究者は大量の書類を書かなければならなくなった。
官僚制は政府と金融だけでなく、企業や教育や医療などが一体となって、一つの大きな官僚システムを構築している。 例えば、アメリカは仕組みとして大卒でないと企業に入れなくなったので、学生は大学を卒業するために金融機関から多額のお金を借りて借金をするような仕組みになっている。 なので学生は借金のために大量に書類を書くというお役所仕事に邁進する羽目になっている。 また、それでお金を借りたら企業に入って収入を監視されながら働き、その収入の一部を銀行に納め続けるシステムが出来上がっている。 これは社会全体として官僚システムを構築したことの一つの例である。
金融市場が発展するにつれて、市内には銀行の支店が増え続けた。 銀行の支店には銃を持った警備員とパソコンがある。 これは暴力と規則が一つになっており、官僚制の象徴そのものである。
感想 日本の右翼と左翼は逆転してる？からか混乱して、アメリカの政治の部分はよくわからなかった。 リベラルな人たちが規制緩和を掲げるが、結果として規制が増えて書類が増えるというのは日本でも同じだなぁと思った。 制度の変更って制度を作る人が得する形で変更するから、そうなると弱い立場の人が報告書類を大量に作らなきゃならなくなるのは当然な気がする。 研究とかね。
自由な市場競争の合理性は幻想であるというのは、新たな気づきだった。 農業のような儲からない仕事は価値がないから先進国で高度な教育を受けた人がやるのは勿体無いよね。 だから貿易を自由化して輸入しましょう。 って例だけを聞いて市場経済の合理性について納得してたが、そもそも貿易するには大量の制度と警察と役所の仕事が必要なので、それをゼロとして見積もって市場の自由は全体として効率的を論じるのは間違ってる気がした。 実際、グローバル化とともに書類が増えてるわけだし。
1 想像力の死角 メモ 母親が病気になった際に後見人と銀行をたらい回しになった。 官僚制における書類作成は複雑すぎてもう誰の手にも追えない状況になっている。 現代のペーパーワークはつまらないものとして規定されている。 現代の出生届は非常に無機質なものだが、昔の出生届は豪華な装飾がおこなわれていた。 もっとも自由と言われている大学人も現在では官僚である。 大学人も休憩室で会話する際には自信の研究について語るのではなく、自分が普段やっているペーパーワークについて語る。
あらゆる官僚的手続きは全て構造的暴力に基礎付けられている。 一つ例を挙げると、アフリカのアパルトヘイトはでは、労働者に様々な個人情報が記載された単一の ID カードを配布していた。そのカードは「ばかパス」と呼ばれていた。 これはそもそも構造的暴力が官僚的手続きを作った愚かな例である。
構造的暴力は解釈労働をうむ。 解釈労働とは相手の考えに思いを巡らせることである。 フェミニズムを例にすると、男性が女性の考えに思いを巡らせる時間は、女性が男性の考えに思いを巡らせる時間よりも圧倒的に短い。 それは、女性は男性による構造的暴力の被害者であるから、女性は男性の考えを理解するために解釈労働を行うのである。
構造的暴力の加害者側は、自身の立ち位置が崩れるのを嫌う。 警察官を例にすると、警察官は普段はペーパーワークをしているが、免許証持ってない人が運転してて逃げた場合とか、逮捕しようとしてるのに抵抗する人に対して暴力的になる。 それは官僚システムの中で自分の役割が危うくなるから。
感想 官僚制の中では誰しもが構造的暴力の加害者になってしまうことがある。 そうなると自分はあまり意識していない人（構造的暴力の被害者）に良く観察されることになる。 私はこの記事を思い出した。 携帯電話のアプリ開発を軍隊に例えて面白くした記事だが、非常によく書けていると思う。 確かに、この記事の人物たちも官僚的なやり方でアプリの開発をしているし、その上で自身は構造的の被害者なので加害者側をよく観察している。 高度に官僚化された組織において上司というのは構造的暴力の加害者になりやすいので、部下に対して解釈労働を払う方が良いのかもね。</description>
    </item>
  </channel>
</rss>
